#!/usr/bin/env python3
import argparse
import json
import csv
from pathlib import Path

def write_category_csv(chart_dir: Path):
    orig_series_f = chart_dir / 'original_series.json'
    orig_labels_f = chart_dir / 'original_labels.json'
    series_f = chart_dir / 'series.json'
    labels_f = chart_dir / 'labels.json'

    # data.csv from original_*
    if orig_series_f.exists():
        series_raw = json.loads(orig_series_f.read_text(encoding='utf-8'))
        # normalize: accepted shapes -> list[list] OR list[dict{name,values}]
        series = []
        if series_raw:
            if isinstance(series_raw[0], dict):
                series = [s.get('values', []) for s in series_raw]
            elif isinstance(series_raw[0], (int, float)):
                series = [series_raw]
            else:
                series = series_raw
        labels = []
        if orig_labels_f.exists():
            labels = json.loads(orig_labels_f.read_text(encoding='utf-8'))
        if not labels:
            labels = [f'L{i+1}' for i in range(len(series[0]) if series else 0)]
        data_path = chart_dir / 'data.csv'
        with data_path.open('w', newline='', encoding='utf-8') as f:
            w = csv.writer(f)
            header = ['label'] + [f's{i}' for i in range(len(series))]
            w.writerow(header)
            for idx, lab in enumerate(labels):
                row = [lab]
                for si in range(len(series)):
                    vals = series[si] if si < len(series) else []
                    row.append(vals[idx] if idx < len(vals) else '')
                w.writerow(row)

    # final_data.csv from edited series/labels
    final_path = chart_dir / 'final_data.csv'
    if series_f.exists():
        series = json.loads(series_f.read_text(encoding='utf-8'))
        if series and isinstance(series[0], (int, float)):
            series = [series]
        labels = []
        if labels_f.exists():
            labels = json.loads(labels_f.read_text(encoding='utf-8'))
        if not labels:
            labels = [f'L{i+1}' for i in range(len(series[0]) if series else 0)]
        with final_path.open('w', newline='', encoding='utf-8') as f:
            w = csv.writer(f)
            header = ['label'] + [f's{i}' for i in range(len(series))]
            w.writerow(header)
            for idx, lab in enumerate(labels):
                row = [lab]
                for si in range(len(series)):
                    vals = series[si]
                    row.append(vals[idx] if idx < len(vals) else '')
                w.writerow(row)


def write_scatter_csv(chart_dir: Path):
    orig_scatter_f = chart_dir / 'original_scatter.json'
    series_f = chart_dir / 'series.json'

    # data.csv from original_scatter
    if orig_scatter_f.exists():
        data = json.loads(orig_scatter_f.read_text(encoding='utf-8'))
        # assume list of series objects with keys x,y or points
        # we take x from first series
        xs = []
        if data:
            s0 = data[0]
            if 'x' in s0:
                xs = s0['x']
            elif 'points' in s0:
                xs = [p[0] for p in s0['points']]
        # collect y series
        ys = []
        for s in data:
            if 'y' in s:
                ys.append(s['y'])
            elif 'points' in s:
                ys.append([p[1] for p in s['points']])
        with (chart_dir / 'data.csv').open('w', newline='', encoding='utf-8') as f:
            w = csv.writer(f)
            header = ['x'] + [f'y{i}' for i in range(len(ys))]
            w.writerow(header)
            for i in range(len(xs)):
                row = [xs[i]]
                for yi in range(len(ys)):
                    row.append(ys[yi][i] if i < len(ys[yi]) else '')
                w.writerow(row)

    # final_data.csv from series.json (y values only; x will be generated by fill)
    if series_f.exists():
        series = json.loads(series_f.read_text(encoding='utf-8'))
        if series and isinstance(series[0], (int, float)):
            series = [series]
        with (chart_dir / 'final_data.csv').open('w', newline='', encoding='utf-8') as f:
            w = csv.writer(f)
            header = ['x'] + [f'y{i}' for i in range(len(series))]
            w.writerow(header)
            # x is sequential starting at 20301 with length of first series
            length = len(series[0]) if series else 0
            for i in range(length):
                row = [20301 + i]
                for si in range(len(series)):
                    row.append(series[si][i] if i < len(series[si]) else '')
                w.writerow(row)


def main():
    ap = argparse.ArgumentParser()
    ap.add_argument('--chart_dir', required=True, help='图表目录，如 charts/p10/chart8')
    ap.add_argument('--type', choices=['category','scatter'], required=True, help='图表类型')
    args = ap.parse_args()
    d = Path(args.chart_dir)
    d.mkdir(parents=True, exist_ok=True)
    if args.type == 'category':
        write_category_csv(d)
    else:
        write_scatter_csv(d)
    print('exported csv at', d)

if __name__ == '__main__':
    main()