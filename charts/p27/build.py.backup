#!/usr/bin/env python3
import re
import zipfile
from pathlib import Path

# 说明：构建 p27 单页 PPTX，复制 slide27 所需的图表、图片、主题，并补齐布局/母版。
# 目标：WPS/PowerPoint 均可正常打开，不再缺少 slideLayout/slideMaster。

ROOT = Path(__file__).resolve().parents[2] / 'L-RTBH-ppt-unzip'
OUT_DIR = Path(__file__).resolve().parents[2] / 'output'
OUT_DIR.mkdir(parents=True, exist_ok=True)
OUT_PPTX = OUT_DIR / 'p27.pptx'

# 原始模板（用于提取缺失的布局/母版资源）
TEMPLATE_PPT = Path(__file__).resolve().parents[2].parent / '图标需求' / 'LRTBH.pptx'

SLIDE_SRC = ROOT / 'slides/slide27.xml'
SLIDE_RELS_SRC = ROOT / 'slides/_rels/slide27.xml.rels'
THEME_SRC = ROOT / 'theme/theme1.xml'
MEDIA_DIR = ROOT / 'media'
CHARTS_DIR = ROOT / 'charts'
CHARTS_RELS_DIR = CHARTS_DIR / '_rels'
EMBED_DIR = ROOT / 'embeddings'


def _read(p: Path) -> str:
    return p.read_text(encoding='utf-8')


def build():
    if not SLIDE_SRC.exists():
        raise FileNotFoundError(SLIDE_SRC)
    if not SLIDE_RELS_SRC.exists():
        raise FileNotFoundError(SLIDE_RELS_SRC)
    if not THEME_SRC.exists():
        raise FileNotFoundError(THEME_SRC)

    slide_xml = _read(SLIDE_SRC)
    rels_xml = _read(SLIDE_RELS_SRC)

    # 解析 slide27.xml.rels：图表、图片、布局
    chart_targets = []
    img_targets = []
    rels = []
    layout_target = None
    for m in re.finditer(r'<Relationship[^>]+Id="([^"]+)"[^>]+Type="([^"]+)"[^>]+Target="([^"]+)"', rels_xml):
        rid, typ, tgt = m.group(1), m.group(2), m.group(3)
        if typ.endswith('/chart'):
            chart_targets.append((rid, tgt))
            rels.append((rid, typ, tgt))
        elif typ.endswith('/image'):
            img_targets.append((rid, tgt))
            rels.append((rid, typ, tgt))
        elif typ.endswith('/slideLayout'):
            layout_target = tgt  # ../slideLayouts/slideLayout5.xml
            rels.append((rid, typ, tgt))
        else:
            # notesSlide 等可忽略
            pass

    # 解析需要复制的图表/关系/嵌入
    charts_to_copy = []
    charts_rel_to_copy = []
    embeddings_to_copy = []
    for rid, tgt in chart_targets:
        chart_name = Path(tgt).name
        chart_xml_path = CHARTS_DIR / chart_name
        if not chart_xml_path.exists():
            raise FileNotFoundError(chart_xml_path)
        charts_to_copy.append(chart_xml_path)
        chart_rels_path = CHARTS_RELS_DIR / f"{chart_name}.rels"
        if chart_rels_path.exists():
            charts_rel_to_copy.append(chart_rels_path)
            txt = _read(chart_rels_path)
            mm = re.search(r'Target="\.\./embeddings/([^\"]+)"', txt)
            if mm:
                emb_name = mm.group(1)
                emb_path = EMBED_DIR / emb_name
                if emb_path.exists():
                    embeddings_to_copy.append(emb_path)

    # 解析需要复制的图片
    images_to_copy = []
    for rid, tgt in img_targets:
        img_name = Path(tgt).name
        img_path = MEDIA_DIR / img_name
        if img_path.exists():
            images_to_copy.append(img_path)

    # 解析布局与母版（可能未解压，需从原始模板读取）
    layout_name = Path(layout_target).name if layout_target else None
    master_name = None
    layout_xml = None
    layout_rels_xml = None
    master_xml = None
    master_rels_xml = None

    with zipfile.ZipFile(TEMPLATE_PPT, 'r') as zin:
        if layout_name:
            # slideLayout XML
            layout_internal = f'ppt/slideLayouts/{layout_name}'
            try:
                layout_xml = zin.read(layout_internal).decode('utf-8')
            except KeyError:
                # 若模板不存在，对应解压目录可能有
                p = ROOT / 'slideLayouts' / layout_name
                if p.exists():
                    layout_xml = _read(p)
            # slideLayout rels → slideMaster
            layout_rels_internal = f'ppt/slideLayouts/_rels/{layout_name}.rels'
            try:
                layout_rels_xml = zin.read(layout_rels_internal).decode('utf-8')
            except KeyError:
                pr = ROOT / 'slideLayouts' / '_rels' / f'{layout_name}.rels'
                if pr.exists():
                    layout_rels_xml = _read(pr)
            if layout_rels_xml:
                mm = re.search(r'Target="\.\./slideMasters/([^\"]+)"', layout_rels_xml)
                if mm:
                    master_name = mm.group(1)
        # slideMaster XML & rels
        if master_name:
            master_internal = f'ppt/slideMasters/{master_name}'
            master_rels_internal = f'ppt/slideMasters/_rels/{master_name}.rels'
            try:
                master_xml = zin.read(master_internal).decode('utf-8')
            except KeyError:
                pm = ROOT / 'slideMasters' / master_name
                if pm.exists():
                    master_xml = _read(pm)
            try:
                master_rels_xml = zin.read(master_rels_internal).decode('utf-8')
            except KeyError:
                pmr = ROOT / 'slideMasters' / '_rels' / f'{master_name}.rels'
                if pmr.exists():
                    master_rels_xml = _read(pmr)

    # 开始打包
    with zipfile.ZipFile(OUT_PPTX, 'w', zipfile.ZIP_DEFLATED) as z:
        # [Content_Types].xml：补齐布局/母版/图表/图片/嵌入
        # 动态生成图片默认类型与嵌入文件类型，避免 WPS/PowerPoint 因缺少 content-types 无法打开。
        defaults = [
            '  <Default Extension="rels" ContentType="application/vnd.openxmlformats-package.relationships+xml"/>',
            '  <Default Extension="xml" ContentType="application/xml"/>',
        ]
        # 图片默认类型（按实际拷贝的资源自动补齐）
        img_exts = {p.suffix[1:].lower() for p in images_to_copy if p.suffix}
        for ext in sorted(img_exts):
            mime = 'image/jpeg' if ext in ('jpg', 'jpeg') else f'image/{ext}'
            defaults.append(f'  <Default Extension="{ext}" ContentType="{mime}"/>')

        # 固定的覆盖项：presentation、slide、theme、docProps
        overrides_fixed = [
            '  <Override PartName="/ppt/presentation.xml" ContentType="application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml"/>',
            '  <Override PartName="/ppt/slides/slide1.xml" ContentType="application/vnd.openxmlformats-officedocument.presentationml.slide+xml"/>',
            '  <Override PartName="/ppt/theme/theme1.xml" ContentType="application/vnd.openxmlformats-officedocument.theme+xml"/>',
            '  <Override PartName="/docProps/core.xml" ContentType="application/vnd.openxmlformats-package.core-properties+xml"/>',
            '  <Override PartName="/docProps/app.xml" ContentType="application/vnd.openxmlformats-officedocument.extended-properties+xml"/>',
        ]
        # 图表覆盖项
        chart_overrides = [
            f'  <Override PartName="/ppt/charts/{p.name}" ContentType="application/vnd.openxmlformats-officedocument.drawingml.chart+xml"/>'
            for p in charts_to_copy
        ]
        # 布局与母版覆盖项
        layout_overrides = []
        if layout_name:
            layout_overrides.append(
                f'  <Override PartName="/ppt/slideLayouts/{layout_name}" ContentType="application/vnd.openxmlformats-officedocument.presentationml.slideLayout+xml"/>'
            )
        if master_name:
            layout_overrides.append(
                f'  <Override PartName="/ppt/slideMasters/{master_name}" ContentType="application/vnd.openxmlformats-officedocument.presentationml.slideMaster+xml"/>'
            )
        # 嵌入覆盖项（xlsb/xlsx/bin 等）
        embed_overrides = []
        for emb in embeddings_to_copy:
            ext = emb.suffix.lower()
            if ext == '.xlsb':
                ct = 'application/vnd.ms-excel.sheet.binary.macroEnabled.12'
            elif ext == '.xlsx':
                ct = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
            elif ext == '.bin':
                ct = 'application/vnd.ms-office.oleObject'
            else:
                ct = 'application/octet-stream'
            embed_overrides.append(
                f'  <Override PartName="/ppt/embeddings/{emb.name}" ContentType="{ct}"/>'
            )

        ct_xml = (
            '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\n'
            '<Types xmlns="http://schemas.openxmlformats.org/package/2006/content-types">\n'
            + '\n'.join(defaults) + '\n'
            + '\n'.join(overrides_fixed) + '\n'
            + '\n'.join(chart_overrides) + '\n'
            + '\n'.join(layout_overrides) + '\n'
            + '\n'.join(embed_overrides) + '\n'
            + '</Types>'
        )
        z.writestr('[Content_Types].xml', ct_xml)

        # _rels/.rels
        rels_top = """<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships">
  <Relationship Id="rId1" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument" Target="ppt/presentation.xml"/>
  <Relationship Id="rId2" Type="http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties" Target="docProps/core.xml"/>
  <Relationship Id="rId3" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties" Target="docProps/app.xml"/>
</Relationships>"""
        z.writestr('_rels/.rels', rels_top)

        # docProps/core.xml
        core_xml = """<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<cp:coreProperties xmlns:cp="http://schemas.openxmlformats.org/package/2006/metadata/core-properties" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" xmlns:dcmitype="http://purl.org/dc/dcmitype/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <dc:title>p10</dc:title>
</cp:coreProperties>"""
        z.writestr('docProps/core.xml', core_xml)

        # docProps/app.xml
        app_xml = """<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<Properties xmlns="http://schemas.openxmlformats.org/officeDocument/2006/extended-properties" xmlns:vt="http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes">
  <Application>Microsoft Office PowerPoint</Application>
</Properties>"""
        z.writestr('docProps/app.xml', app_xml)

        # ppt/presentation.xml（仅一页，补充 slideMasterIdLst）
        pres_xml = """<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<p:presentation xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/main" xmlns:r="http://schemas.openxmlformats.org/officeDocument/2006/relationships" xmlns:p="http://schemas.openxmlformats.org/presentationml/2006/main">
  <p:sldIdLst>
    <p:sldId id="256" r:id="rId1"/>
  </p:sldIdLst>
  <p:sldMasterIdLst>
    <p:sldMasterId r:id="rId3"/>
  </p:sldMasterIdLst>
  <p:defaultTextStyle/>
</p:presentation>"""
        z.writestr('ppt/presentation.xml', pres_xml)

        # ppt/_rels/presentation.xml.rels：增加 slideMaster 引用
        pres_rels_lines = [
            '<Relationship Id="rId1" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/slide" Target="slides/slide1.xml"/>',
            '<Relationship Id="rId2" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme" Target="theme/theme1.xml"/>'
        ]
        if master_name:
            pres_rels_lines.append(f'<Relationship Id="rId3" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/slideMaster" Target="slideMasters/{master_name}"/>')
        pres_rels = '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\n<Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships">' + ''.join(pres_rels_lines) + '</Relationships>'
        z.writestr('ppt/_rels/presentation.xml.rels', pres_rels)

        # ppt/slides/slide1.xml（源自 slide27.xml）
        z.writestr('ppt/slides/slide1.xml', slide_xml)

        # ppt/slides/_rels/slide1.xml.rels（包含布局/图表/图片）
        rels_lines = [f'<Relationship Id="{rid}" Type="{typ}" Target="{tgt}"/>' for rid, typ, tgt in rels]
        slide_rels = '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\n<Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships">' + ''.join(rels_lines) + '</Relationships>'
        z.writestr('ppt/slides/_rels/slide1.xml.rels', slide_rels)

        # 主题
        z.writestr('ppt/theme/theme1.xml', _read(THEME_SRC))

        # 布局与母版
        if layout_name and layout_xml:
            z.writestr(f'ppt/slideLayouts/{layout_name}', layout_xml)
        if layout_name and layout_rels_xml:
            z.writestr(f'ppt/slideLayouts/_rels/{layout_name}.rels', layout_rels_xml)
        if master_name and master_xml:
            z.writestr(f'ppt/slideMasters/{master_name}', master_xml)
        if master_name and master_rels_xml:
            z.writestr(f'ppt/slideMasters/_rels/{master_name}.rels', master_rels_xml)

        # 图表及其关系
        for p in charts_to_copy:
            z.writestr(f'ppt/charts/{p.name}', _read(p))
            relp = CHARTS_RELS_DIR / f'{p.name}.rels'
            if relp.exists():
                z.writestr(f'ppt/charts/_rels/{p.name}.rels', _read(relp))
        # 嵌入数据
        for emb in embeddings_to_copy:
            z.writestr(f'ppt/embeddings/{emb.name}', emb.read_bytes())
        # 图片
        for img in images_to_copy:
            z.writestr(f'ppt/media/{img.name}', img.read_bytes())

    print('Built', OUT_PPTX)


if __name__ == '__main__':
    build()